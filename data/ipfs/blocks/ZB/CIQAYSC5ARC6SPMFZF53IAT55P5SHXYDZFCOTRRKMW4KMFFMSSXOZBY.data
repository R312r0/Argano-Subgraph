
øðtype UniswapFactory @entity {
  # factory address
  id: ID!

  # total volume
  totalVolumeETH: BigDecimal!

  # untracked values - less confident USD scores
  untrackedVolumeUSD: BigDecimal!

  # total liquidity
  totalLiquidityUSD: BigDecimal!
  totalLiquidityETH: BigDecimal!

  totalValueLocked: [TvlChartItem!]!
  totalVolume: [VolumeChartItem!]!
  # totalVolumeUSDCurrent:  BigDecimal!
}

type VolumeChartItem @entity {
  id: ID!
  value: BigDecimal!
  timestamp: BigInt!
}

type TvlChartItem @entity {
  id: ID!
  value: BigDecimal!
  timestamp: BigInt!
}

type Transaction @entity {
  id: ID!
  name: String!
  from: Bytes!
  token0: String!
  token1: String!
  amount0: BigDecimal!
  amount1: BigDecimal
  amountTotalUSD: BigDecimal!
  timestamp: BigInt!
}


type Pair @entity {
  # pair address
  id: ID!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!
  trackedReserveETH: BigDecimal!

  token0Price: BigDecimal!
  token1Price: BigDecimal!
  liquidityProviderCount: BigInt!
  ### ADD LIQUIDITY PROVIDER COUNT! FOR CALCULATING VOLUME

  # # Is that pool that can have reward token in AGO
  # isEarnTypePool: Bool!

  # #Volume
  volumeUSD: BigDecimal!
  # totalVolumeUSD: BigInt!
  # volume24hUSD: BigInt!
  volumeChart: [PairVolumeChartItem!]!

  # #Liquidity
  # totalLiquidityUSD: BigInt!
  # liquidity24hUSD: BigInt!
   liquidityChart: [LiquidityChartItem!]!

  # #TXS
  # transactions: [Transaction!]

}

 type PairVolumeChartItem @entity {
   id: ID!
   timestamp: BigInt!
   valueUSD: BigDecimal!
 }

 type LiquidityChartItem @entity {
   id: ID!
   timestamp: BigInt!
   valueUSD: BigDecimal!
 }

type Token @entity {
  id: ID!
  symbol: String!
  name: String!

  totalLiquidity: BigDecimal!

  decimals: BigInt!

  derivedETH: BigDecimal!
  priceUSD: BigDecimal!
  isProtocolMain: Boolean!

  # Prices
  # currentPriceUSD: BigInt!
  lineChartUSD: [TokenPriceLineItem!]! @derivedFrom(field: "token")
  # candleStickChart: [CandleChartPriceItem!]
}

type TokenPriceLineItem @entity {
  id: ID!
  token: Token!
  timestamp: BigInt!
  valueUSD: BigDecimal!
}

# type CandleChartPriceItem @entity {
#   timestamp: BigInt!
#   open: BigInt!
#   high: BigInt!
#   low: BigInt!
#   close: BigInt!
# }

type Bundle @entity {
  id: ID!
  ethPrice: BigDecimal! # price of ETH usd
}
ð