// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shareAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get dollarAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dollarAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get shareAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collateralAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RedemptionCollected extends ethereum.Event {
  get params(): RedemptionCollected__Params {
    return new RedemptionCollected__Params(this);
  }
}

export class RedemptionCollected__Params {
  _event: RedemptionCollected;

  constructor(event: RedemptionCollected) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shareAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TreasuryTransferred extends ethereum.Event {
  get params(): TreasuryTransferred__Params {
    return new TreasuryTransferred__Params(this);
  }
}

export class TreasuryTransferred__Params {
  _event: TreasuryTransferred;

  constructor(event: TreasuryTransferred) {
    this._event = event;
  }

  get previousTreasury(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newTreasury(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StablePool__infoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }
}

export class StablePool extends ethereum.SmartContract {
  static bind(address: Address): StablePool {
    return new StablePool("StablePool", address);
  }

  collateral(): Address {
    let result = super.call("collateral", "collateral():(address)", []);

    return result[0].toAddress();
  }

  try_collateral(): ethereum.CallResult<Address> {
    let result = super.tryCall("collateral", "collateral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateralDollarBalance(): BigInt {
    let result = super.call(
      "collateralDollarBalance",
      "collateralDollarBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collateralDollarBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralDollarBalance",
      "collateralDollarBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collect_redemption_delay(): BigInt {
    let result = super.call(
      "collect_redemption_delay",
      "collect_redemption_delay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collect_redemption_delay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collect_redemption_delay",
      "collect_redemption_delay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dollar(): Address {
    let result = super.call("dollar", "dollar():(address)", []);

    return result[0].toAddress();
  }

  try_dollar(): ethereum.CallResult<Address> {
    let result = super.tryCall("dollar", "dollar():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollateralPrice(): BigInt {
    let result = super.call(
      "getCollateralPrice",
      "getCollateralPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCollateralPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralPrice",
      "getCollateralPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralToken(): Address {
    let result = super.call(
      "getCollateralToken",
      "getCollateralToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getCollateralToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCollateralToken",
      "getCollateralToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMissing_decimals(): BigInt {
    let result = super.call(
      "getMissing_decimals",
      "getMissing_decimals():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getMissing_decimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMissing_decimals",
      "getMissing_decimals():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governanceToken(): Address {
    let result = super.call(
      "governanceToken",
      "governanceToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_governanceToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "governanceToken",
      "governanceToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  info(): StablePool__infoResult {
    let result = super.call(
      "info",
      "info():(uint256,uint256,uint256,uint256,uint256,bool,bool)",
      []
    );

    return new StablePool__infoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBoolean()
    );
  }

  try_info(): ethereum.CallResult<StablePool__infoResult> {
    let result = super.tryCall(
      "info",
      "info():(uint256,uint256,uint256,uint256,uint256,bool,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StablePool__infoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBoolean()
      )
    );
  }

  last_redeemed(param0: Address): BigInt {
    let result = super.call(
      "last_redeemed",
      "last_redeemed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_last_redeemed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "last_redeemed",
      "last_redeemed(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  migrated(): boolean {
    let result = super.call("migrated", "migrated():(bool)", []);

    return result[0].toBoolean();
  }

  try_migrated(): ethereum.CallResult<boolean> {
    let result = super.tryCall("migrated", "migrated():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint_paused(): boolean {
    let result = super.call("mint_paused", "mint_paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_mint_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("mint_paused", "mint_paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool_ceiling(): BigInt {
    let result = super.call("pool_ceiling", "pool_ceiling():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pool_ceiling(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("pool_ceiling", "pool_ceiling():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem_collateral_balances(param0: Address): BigInt {
    let result = super.call(
      "redeem_collateral_balances",
      "redeem_collateral_balances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_redeem_collateral_balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeem_collateral_balances",
      "redeem_collateral_balances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem_paused(): boolean {
    let result = super.call("redeem_paused", "redeem_paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_redeem_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("redeem_paused", "redeem_paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  redeem_share_balances(param0: Address): BigInt {
    let result = super.call(
      "redeem_share_balances",
      "redeem_share_balances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_redeem_share_balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeem_share_balances",
      "redeem_share_balances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redemption_delay(): BigInt {
    let result = super.call(
      "redemption_delay",
      "redemption_delay():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_redemption_delay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redemption_delay",
      "redemption_delay():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  share(): Address {
    let result = super.call("share", "share():(address)", []);

    return result[0].toAddress();
  }

  try_share(): ethereum.CallResult<Address> {
    let result = super.tryCall("share", "share():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unclaimed_pool_collateral(): BigInt {
    let result = super.call(
      "unclaimed_pool_collateral",
      "unclaimed_pool_collateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_unclaimed_pool_collateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unclaimed_pool_collateral",
      "unclaimed_pool_collateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unclaimed_pool_share(): BigInt {
    let result = super.call(
      "unclaimed_pool_share",
      "unclaimed_pool_share():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_unclaimed_pool_share(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unclaimed_pool_share",
      "unclaimed_pool_share():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _dollar(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _share(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _collateral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _governanceToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _pool_ceiling(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CollectRedemptionCall extends ethereum.Call {
  get inputs(): CollectRedemptionCall__Inputs {
    return new CollectRedemptionCall__Inputs(this);
  }

  get outputs(): CollectRedemptionCall__Outputs {
    return new CollectRedemptionCall__Outputs(this);
  }
}

export class CollectRedemptionCall__Inputs {
  _call: CollectRedemptionCall;

  constructor(call: CollectRedemptionCall) {
    this._call = call;
  }
}

export class CollectRedemptionCall__Outputs {
  _call: CollectRedemptionCall;

  constructor(call: CollectRedemptionCall) {
    this._call = call;
  }
}

export class MigrateCall extends ethereum.Call {
  get inputs(): MigrateCall__Inputs {
    return new MigrateCall__Inputs(this);
  }

  get outputs(): MigrateCall__Outputs {
    return new MigrateCall__Outputs(this);
  }
}

export class MigrateCall__Inputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }

  get _new_pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MigrateCall__Outputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _collateral_amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _share_amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _dollar_out_min(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get _dollar_amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _share_out_min(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateral_out_min(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCollectRedemptionDelayCall extends ethereum.Call {
  get inputs(): SetCollectRedemptionDelayCall__Inputs {
    return new SetCollectRedemptionDelayCall__Inputs(this);
  }

  get outputs(): SetCollectRedemptionDelayCall__Outputs {
    return new SetCollectRedemptionDelayCall__Outputs(this);
  }
}

export class SetCollectRedemptionDelayCall__Inputs {
  _call: SetCollectRedemptionDelayCall;

  constructor(call: SetCollectRedemptionDelayCall) {
    this._call = call;
  }

  get _collect_redemption_delay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCollectRedemptionDelayCall__Outputs {
  _call: SetCollectRedemptionDelayCall;

  constructor(call: SetCollectRedemptionDelayCall) {
    this._call = call;
  }
}

export class SetOracleCall extends ethereum.Call {
  get inputs(): SetOracleCall__Inputs {
    return new SetOracleCall__Inputs(this);
  }

  get outputs(): SetOracleCall__Outputs {
    return new SetOracleCall__Outputs(this);
  }
}

export class SetOracleCall__Inputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleCall__Outputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }
}

export class SetPoolCeilingCall extends ethereum.Call {
  get inputs(): SetPoolCeilingCall__Inputs {
    return new SetPoolCeilingCall__Inputs(this);
  }

  get outputs(): SetPoolCeilingCall__Outputs {
    return new SetPoolCeilingCall__Outputs(this);
  }
}

export class SetPoolCeilingCall__Inputs {
  _call: SetPoolCeilingCall;

  constructor(call: SetPoolCeilingCall) {
    this._call = call;
  }

  get _pool_ceiling(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPoolCeilingCall__Outputs {
  _call: SetPoolCeilingCall;

  constructor(call: SetPoolCeilingCall) {
    this._call = call;
  }
}

export class SetRedemptionDelayCall extends ethereum.Call {
  get inputs(): SetRedemptionDelayCall__Inputs {
    return new SetRedemptionDelayCall__Inputs(this);
  }

  get outputs(): SetRedemptionDelayCall__Outputs {
    return new SetRedemptionDelayCall__Outputs(this);
  }
}

export class SetRedemptionDelayCall__Inputs {
  _call: SetRedemptionDelayCall;

  constructor(call: SetRedemptionDelayCall) {
    this._call = call;
  }

  get _redemption_delay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRedemptionDelayCall__Outputs {
  _call: SetRedemptionDelayCall;

  constructor(call: SetRedemptionDelayCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class ToggleMintingCall extends ethereum.Call {
  get inputs(): ToggleMintingCall__Inputs {
    return new ToggleMintingCall__Inputs(this);
  }

  get outputs(): ToggleMintingCall__Outputs {
    return new ToggleMintingCall__Outputs(this);
  }
}

export class ToggleMintingCall__Inputs {
  _call: ToggleMintingCall;

  constructor(call: ToggleMintingCall) {
    this._call = call;
  }
}

export class ToggleMintingCall__Outputs {
  _call: ToggleMintingCall;

  constructor(call: ToggleMintingCall) {
    this._call = call;
  }
}

export class ToggleRedeemingCall extends ethereum.Call {
  get inputs(): ToggleRedeemingCall__Inputs {
    return new ToggleRedeemingCall__Inputs(this);
  }

  get outputs(): ToggleRedeemingCall__Outputs {
    return new ToggleRedeemingCall__Outputs(this);
  }
}

export class ToggleRedeemingCall__Inputs {
  _call: ToggleRedeemingCall;

  constructor(call: ToggleRedeemingCall) {
    this._call = call;
  }
}

export class ToggleRedeemingCall__Outputs {
  _call: ToggleRedeemingCall;

  constructor(call: ToggleRedeemingCall) {
    this._call = call;
  }
}

export class TransferCollateralToTreasuryCall extends ethereum.Call {
  get inputs(): TransferCollateralToTreasuryCall__Inputs {
    return new TransferCollateralToTreasuryCall__Inputs(this);
  }

  get outputs(): TransferCollateralToTreasuryCall__Outputs {
    return new TransferCollateralToTreasuryCall__Outputs(this);
  }
}

export class TransferCollateralToTreasuryCall__Inputs {
  _call: TransferCollateralToTreasuryCall;

  constructor(call: TransferCollateralToTreasuryCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TransferCollateralToTreasuryCall__Outputs {
  _call: TransferCollateralToTreasuryCall;

  constructor(call: TransferCollateralToTreasuryCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
